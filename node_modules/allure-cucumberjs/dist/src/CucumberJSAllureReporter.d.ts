import { World as CucumberWorld, Formatter } from "@cucumber/cucumber";
import { IFormatterOptions } from "@cucumber/cucumber/lib/formatter";
import { Allure, AllureGroup, AllureRuntime, AllureTest, ExecutableItemWrapper } from "allure-js-commons";
export { Allure } from "allure-js-commons";
export interface World extends CucumberWorld {
    allure: Allure;
}
export declare type LabelMatcher = {
    pattern: RegExp[];
    name: "epic" | "severity" | string;
};
export declare type LinkMatcher = {
    pattern: RegExp[];
    urlTemplate: string;
    type: "tms" | "issue" | string;
};
export declare class CucumberJSAllureFormatterConfig {
    exceptionFormatter?: (message: string) => string;
    labels?: LabelMatcher[];
    links?: LinkMatcher[];
}
export declare class CucumberJSAllureFormatter extends Formatter {
    private readonly allureRuntime;
    readonly allureInterface: Allure;
    currentAfter: ExecutableItemWrapper | null;
    currentBefore: ExecutableItemWrapper | null;
    currentGroup: AllureGroup | null;
    currentTest: AllureTest | null;
    private readonly afterHooks;
    private readonly beforeHooks;
    private readonly exceptionFormatter;
    private readonly labelsMathers;
    private readonly linksMatchers;
    private stepStack;
    private hostname;
    private readonly documentMap;
    private readonly featureMap;
    private readonly scenarioMap;
    private readonly stepMap;
    private readonly testStepMap;
    private readonly pickleStepMap;
    private readonly stepDefinitionMap;
    private readonly testCaseTestStepsResults;
    private readonly pickleMap;
    private readonly hookMap;
    private readonly sourceMap;
    private readonly testCaseMap;
    private readonly testCaseStartedMap;
    private readonly allureSteps;
    private runningTestsMap;
    constructor(options: IFormatterOptions, allureRuntime: AllureRuntime, config: CucumberJSAllureFormatterConfig);
    private get tagsIgnorePatterns();
    private parseEnvelope;
    private parseTagsLabels;
    private parseTagsLinks;
    private onGherkinDocument;
    private onScenario;
    private onPickle;
    private onTestCase;
    private onTestCaseStarted;
    private onAttachment;
    private onTestCaseFinished;
    private onHook;
    private onSource;
    private onTestStepStarted;
    private onTestStepFinished;
    private convertStatus;
}
